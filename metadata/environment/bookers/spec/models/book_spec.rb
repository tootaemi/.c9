{"filter":false,"title":"book_spec.rb","tooltip":"/bookers/spec/models/book_spec.rb","ace":{"folds":[],"scrolltop":633.5,"scrollleft":0,"selection":{"start":{"row":45,"column":0},"end":{"row":45,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0,"cleansed":true},"hash":"a391b1115359d2c24d19044b5420ed8cc6acad67","mime":"text/x-script.ruby","changed":true,"value":"# frozen_string_literal: true\n\nrequire 'rails_helper'\n\nRSpec.describe Book, \"モデルに関するテスト\", type: :model do\n  describe '実際に保存してみる' do\n    it \"有効な投稿内容の場合は保存されるか\" do\n      expect(FactoryBot.build(:book)).to be_valid\n    end\n  end\n  context \"空白のバリデーションチェック\" do\n    it \"titleが空白の場合にバリデーションチェックされ空白のエラーメッセージが返ってきているか\" do\n      book = Book.new(title: '', body:'hoge')\n      expect(book).to be_invalid\n      expect(book.errors[:title]).to include(\"can't be blank\")\n    end\n    it \"bodyが空白の場合にバリデーションチェックされ空白のエラーメッセージが返ってきているか\" do\n      book = Book.new(title: 'hoge', body:'')\n      expect(book).to be_invalid\n      expect(book.errors[:body]).to include(\"can't be blank\")\n    end\n  end\n  feature \"titleを空白で投稿した場合に画面にエラーメッセージが表示されているか\" do\n    before do\n      visit books_path\n      fill_in 'book[title]', with: ''\n    end\n    scenario \"エラーメッセージは正しく表示されるか\" do\n      find(\"input[name='commit']\").click\n      expect(page).to have_content \"can't be blank\"\n    end\n  end\n  feature \"bodyを空白で投稿した場合に画面にエラーメッセージが表示されているか\" do\n    before do\n      visit books_path\n      fill_in 'book[body]', with: ''\n    end\n    scenario \"エラーメッセージは正しく表示されるか\" do\n      find(\"input[name='commit']\").click\n      expect(page).to have_content \"can't be blank\"\n    end\n  end\n  \n\n end\n","undoManager":{"mark":-2,"position":-1,"stack":[]},"timestamp":1664553668754}